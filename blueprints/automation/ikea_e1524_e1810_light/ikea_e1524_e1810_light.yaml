# Blueprint metadata
blueprint:
  name: IKEA E1524/E1810 5-button Remote - Light Support
  description: '
    An automation for controlling a light with an IKEA E1524/E1810 remote controller. Automatic support for dimmable, colour and spectrum lights.

    Supports Zigbee2MQTT, deCONZ, ZHA.


    Full documentation is available [here](https://epmatt.github.io/awesome-ha-blueprints/blueprints/automation/ikea_e1524_e1810_light).
    '
#    source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/automation/ikea_e1524_e1810_universal/ikea_e1524_e1810_universal.yaml
  source_url: https://github.com/lebeno/awesome-ha-blueprints/tree/main/blueprints/automation/ikea_e1524_e1810_light/ikea_e1524_e1810_light.yaml
  domain: automation
  input:
    integration:
      name: Integration
      description: Integration used for connecting the remote with Home Assistant. Type "Zigbee2MQTT", "deCONZ" or "ZHA"
    remote:
      name: (ZHA, deCONZ) Remote
      description: The IKEA remote to use for the automation. Choose a value only if the remote is integrated with deCONZ or ZHA.
      default: ''
      selector:
        device:
    zigbee2mqtt_remote:
      name: (Zigbee2MQTT) Remote Action Sensor
      description: The action sensor of the IKEA remote to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    light_target:
      name: Light
      selector:
        target:
          entity:
            domain: light
#   Possible extra inputs:
#       number of brightness steps (default: 10)
#       number of colour steps (default IKEA: 9)
#       transition time
#       
#    action_left_short:
#      name: (Optional) Left button - short press
#      description: Action to run on short left button press.
#      default: []
#      selector:
#        action:
#    action_left_long:
#      name: (Optional) Left button - long press
#      description: Action to run on long left button press.
#      default: []
#      selector:
#        action:
#    action_left_release:
#      name: (Optional) Left button - release after long press
#      description: Action to run on left button release after a long press.
#      default: []
#      selector:
#        action:
#    action_right_short:
#      name: (Optional)  Right button - short press
#      description: Action to run on short right button press.
#      default: []
#      selector:
#        action:
#    action_right_long:
#      name: (Optional) Right button - long press
#      description: Action to run on long right button press.
#      default: []
#      selector:
#        action:
#    action_right_release:
#      name: (Optional) Right button - release after long press
#      description: Action to run on right button release after a long press.
#      default: []
#      selector:
#        action:
#    action_up_short:
#      name: (Optional) Up button - short press
#      description: Action to run on short up button press.
#      default: []
#      selector:
#        action:
#    action_up_long:
#      name: (Optional) Up button - long press
#      description: Action to run on long up button press.
#      default: []
#      selector:
#        action:
#    action_up_release:
#      name: (Optional) Up button - release after long press
#      description: Action to run on up button release after a long press.
#      default: []
#      selector:
#        action:
#    action_down_short:
#      name: (Optional) Down button - short press
#      description: Action to run on short down button press.
#      default: []
#      selector:
#        action:
#    action_down_long:
#      name: (Optional) Down button - long press
#      description: Action to run on long down button press.
#      default: []
#      selector:
#        action:
#    action_down_release:
#      name: (Optional) Down button - release after long press
#      description: Action to run on down button release after a long press.
#      default: []
#      selector:
#        action:
#    action_center_short:
#      name: (Optional) Center button - short press
#      description: Action to run on short center button press.
#      default: []
#      selector:
#        action:
#    action_center_hold:
#      name: (Optional) Center button - long press
#      description: Action to run on long center button press.
#      default: []
#      selector:
#        action:
#    button_left_long_loop:
#      name: Long left button press - loop until release
#      description: Loop the action until the button is released.
#      default: false
#      selector:
#        boolean:
#    button_right_long_loop:
#      name: Long right button press - loop until release
#      description: Loop the action until the button is released.
#      default: false
#      selector:
#        boolean:
#    button_up_long_loop:
#      name: Long up button press - loop until release
#      description: Loop the action until the button is released.
#      default: false
#      selector:
#        boolean:
#    button_down_long_loop:
#      name: Long down button press - loop until release
#      description: Loop the action until the button is released.
#      default: false
#      selector:
#        boolean:
    helper_last_loop_event_input:
      name: (ZHA) Helper - Last Long Press Event
      description: Input Text used to store the last long press event. See docs for more. Provide an entity only if the remote is integrated with ZHA.
      default: ''
      selector:
        entity:
          domain: input_text

# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  button_left_long_loop: !input button_left_long_loop
  button_right_long_loop: !input button_right_long_loop
  button_up_long_loop: !input button_up_long_loop
  button_down_long_loop: !input button_down_long_loop
  helper_last_loop_event_input: !input helper_last_loop_event_input
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # mapping between actions and integrations
  actions_mapping:
    zigbee2mqtt:
      button_left_short: [arrow_left_click]
      button_left_long: [arrow_left_hold]
      button_left_release: [arrow_left_release]
      button_right_short: [arrow_right_click]
      button_right_long: [arrow_right_hold]
      button_right_release: [arrow_right_release]
      button_up_short: [brightness_up_click]
      button_up_long: [brightness_up_hold]
      button_up_release: [brightness_up_release]
      button_down_short: [brightness_down_click]
      button_down_long: [brightness_down_hold]
      button_down_release: [brightness_down_release]
      button_center_short: [toggle]
      button_center_hold: [toggle_hold]
    deconz:
      button_left_short: [4002]
      button_left_long: [4001]
      button_left_release: [4003]
      button_right_short: [5002]
      button_right_long: [5001]
      button_right_release: [5003]
      button_up_short: [2002]
      button_up_long: [2001]
      button_up_release: [2003]
      button_down_short: [3002]
      button_down_long: [3001]
      button_down_release: [3003]
      button_center_short: [1002]
      button_center_hold: [1001]
    zha:
      button_left_short: [press_257_13_0]
      button_left_long: [hold_3329_0]
      button_left_release: [release]
      button_right_short: [press_256_13_0]
      button_right_long: [hold_3328_0]
      button_right_release: [release]
      button_up_short: [step_with_on_off_0_43_5]
      button_up_long: [move_with_on_off_0_83, move_with_on_off_0_84]
      button_up_release: [stop]
      button_down_short: [step_1_43_5]
      button_down_long:  [move_1_83, move_1_84]
      button_down_release: [stop]
      button_center_short: [toggle]
      button_center_hold: [press_2_0_0]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_left_short: '{{ actions_mapping[integration_id]["button_left_short"] }}'
  button_left_long: '{{ actions_mapping[integration_id]["button_left_long"] }}'
  button_left_release: '{{ actions_mapping[integration_id]["button_left_release"] }}'
  button_right_short: '{{ actions_mapping[integration_id]["button_right_short"] }}'
  button_right_long: '{{ actions_mapping[integration_id]["button_right_long"] }}'
  button_right_release: '{{ actions_mapping[integration_id]["button_right_release"] }}'
  button_up_short: '{{ actions_mapping[integration_id]["button_up_short"] }}'
  button_up_long: '{{ actions_mapping[integration_id]["button_up_long"] }}'
  button_up_release: '{{ actions_mapping[integration_id]["button_up_release"] }}'
  button_down_short: '{{ actions_mapping[integration_id]["button_down_short"] }}'
  button_down_long: '{{ actions_mapping[integration_id]["button_down_long"] }}'
  button_down_release: '{{ actions_mapping[integration_id]["button_down_release"] }}'
  button_center_short: '{{ actions_mapping[integration_id]["button_center_short"] }}'
  button_center_hold: '{{ actions_mapping[integration_id]["button_center_hold"] }}'
  # pre-choose trigger event type based on configured integration (blank for zigbee2mqtt since it uses a different trigger)
  # no need to perform this task at automation runtime

# mode restart ensures hold actions are interrupted when a the corresponding release action is received
mode: restart
max_exceeded: silent

trigger: 
# trigger for zigbee2mqtt
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input zigbee2mqtt_remote
# trigger for other integrations
- platform: event
  event_type:
  - zha_event
  - deconz_event
  event_data:
    device_id: !input remote
condition:
action:
# extract button event from the trigger
# provide a single string value to check against
- variables:
    trigger_action: '
    {% if integration_id == "zigbee2mqtt" %}
    {{ trigger.event.data.new_state.state }}
    {% elif integration_id == "deconz" %}
    {{ trigger.event.data.event }}
    {% elif integration_id == "zha" %}
    {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
    {% endif %}
    '
- condition: and
  conditions:
  # check that the button event is not empty
  - '{{ trigger_action != "" }}'
  # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
  # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
  - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
# choose the sequence to run based on the received button event
- choose:
#  - conditions: "{{ trigger_action in button_left_short }}"
#    sequence: !input action_left_short
#  - conditions: "{{ trigger_action in button_left_long }}"
#    sequence: 
#    # for zha integration, store the button event only if a release action has been provided (else the check would be useless)
#    - choose:
#      - conditions:
#        - '{{ integration_id == "zha" }}'
#        - '{{ action_left_release != "" }}'
#        sequence: 
#        - service: 'input_text.set_value'
#          data:
#            entity_id: !input helper_last_loop_event_input
#            value: '{{ trigger_action }}'
#    # if looping is enabled, loop the action indefinitely
#    # repeat until the automation is restarted ie. when the corresponding release message is received
#    - repeat:
#        sequence: !input action_left_long
#        until: '{{ not button_left_long_loop }}'
#  - conditions:
#    - '{{ trigger_action in button_left_release }}'
#    # for the zha integration, need to check the previous button event, stored in the provided input_text
#    - '{{ not integration_id == "zha" or states(helper_last_loop_event_input) in button_left_long }}'
#    sequence: !input action_left_release
#  - conditions: "{{ trigger_action in button_right_short }}"
#    sequence: !input action_right_short
#  - conditions: "{{ trigger_action in button_right_long }}"
#    sequence: 
#    # for zha integration, store the button event only if a release action has been provided (else the check would be useless)
#    - choose:
#      - conditions:
#        - '{{ integration_id == "zha" }}'
#        - '{{ action_right_release != "" }}'
#        sequence: 
#        - service: 'input_text.set_value'
#          data:
#            entity_id: !input helper_last_loop_event_input
#            value: '{{ trigger_action }}'
#    # if looping is enabled, loop the action indefinitely
#    # repeat until the automation is restarted ie. when the corresponding release message is received
#    - repeat:
#        sequence: !input action_right_long
#        until: '{{ not button_right_long_loop }}'
#  - conditions:
#    - '{{ trigger_action in button_right_release }}'
#    # for the zha integration, need to check the previous button event, stored in the provided input_text
#    - '{{ not integration_id == "zha" or states(helper_last_loop_event_input) in button_right_long }}'
#    sequence: !input action_right_release
  - conditions: "{{ trigger_action in button_up_short }}"
    sequence:
      - service: light.turn_on
        data:
          brightness_step_pct: 10
          transition: 0
        entity_id: !input light_target
#  - conditions: "{{ trigger_action in button_up_long }}"
#    sequence:
#    # for zha integration, store the button event only if a release action has been provided (else the check would be useless)
#    - choose:
#      - conditions:
#        - '{{ integration_id == "zha" }}'
#        - '{{ action_up_release != "" }}'
#        sequence: 
#        - service: 'input_text.set_value'
#          data:
#            entity_id: !input helper_last_loop_event_input
#            value: '{{ trigger_action }}'
#    # if looping is enabled, loop the action indefinitely
#    # repeat until the automation is restarted ie. when the corresponding release message is received
#    - repeat:
#        sequence: !input action_up_long
#        until: '{{ not button_up_long_loop }}'
#  - conditions:
#    - '{{ trigger_action in button_up_release }}'
#    # for the zha integration, need to check the previous button event, stored in the provided input_text
#    - '{{ not integration_id == "zha" or states(helper_last_loop_event_input) in button_up_long }}'
#    sequence: !input action_up_release
#  - conditions: "{{ trigger_action in button_down_short }}"
#    sequence: !input action_down_short
#  - conditions: "{{ trigger_action in button_down_long }}"
#    sequence:
#    # for zha integration, store the button event only if a release action has been provided (else the check would be useless)
#    - choose:
#      - conditions:
#        - '{{ integration_id == "zha" }}'
#        - '{{ action_down_release != "" }}'
#        sequence: 
#        - service: 'input_text.set_value'
#          data:
#            entity_id: !input helper_last_loop_event_input
#            value: '{{ trigger_action }}'
#    # if looping is enabled, loop the action indefinitely
#    # repeat until the automation is restarted ie. when the corresponding release message is received
#    - repeat:
#        sequence: !input action_down_long
#        until: '{{ not button_down_long_loop }}'
#  - conditions:
#    - '{{ trigger_action in button_down_release }}'
#    # for the zha integration, need to check the previous button event, stored in the provided input_text
#    - '{{ not integration_id == "zha" or states(helper_last_loop_event_input) in button_down_long }}'
#    sequence: !input action_down_release
  - conditions: "{{ trigger_action in button_center_short }}"
    sequence: !input action_center_short
      - service: light.toggle
        entity_id: !input light_target
        
#  - conditions: "{{ trigger_action in button_center_hold }}"
#    # run the hold action once, since the remote doesn't provide a release event on the center button
#    # moreover, the short center button press event is always triggered before this event
#    sequence: !input action_center_hold
